{"ast":null,"code":"var _jsxFileName = \"/Users/FatimaElZahraa/shopify-challenge/my-app/src/Pages/Winner/Winner.tsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// import \"./Winner.css\";\n// import { WinnerProps } from \"./Winner.types\";\n\n// export const Winner = ({ movies }: WinnerProps) => {\n//   const handleSelectWinner = () => {\n//     // Randomly select a movie as the winner\n//     const randomIndex = Math.floor(Math.random() * movies.length);\n//     const winnerMovie = movies[randomIndex];\n//     console.log(\"Winner:\", winnerMovie);\n//   };\n\n//   return (\n//     <div className=\"winner-container\">\n//       <h1>Winner</h1>\n//       <button onClick={handleSelectWinner}>Select Winner</button>\n//       <div className=\"nominated-movies-container\">\n//         {movies.map((movie, index) => (\n//           <NominatedMovie\n//             key={movie.id}\n//             id={movie.id}\n//             index={index + 1}\n//             onRemove={() => {}}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n//////////////////////\n\nimport { useEffect, useState } from \"react\";\nimport { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\nimport { useCookies } from \"react-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Winner = () => {\n  _s();\n  const [cookie] = useCookies(['movies']);\n  const [winner, setWinner] = useState(null);\n  const [movies, setMovies] = useState();\n  useEffect(() => {\n    if (nominatedMovies && nominatedMovies.length > 0) {\n      const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n      setWinner(nominatedMovies[randomIndex]);\n    }\n  }, [nominatedMovies]);\n  useEffect(() => {\n    setMovies(JSON.parse(cookie.movies));\n  }, [cookie]);\n  return winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NominatedMovie, {\n      id: winner.imdbID,\n      index: 1 // You can set the desired index here\n      ,\n      onRemove: () => {} // You can add a remove handler if needed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No nominated movies found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n//////////////////////////////////\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?s=YOUR_SEARCH_TERM&apikey=3d85689c\" // Replace YOUR_SEARCH_TERM with your specific search term\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n_s(Winner, \"1XrT/MBqoYezQbxtVLAgJDG6ApU=\", false, function () {\n  return [useCookies];\n});\n_c = Winner;\nvar _c;\n$RefreshReg$(_c, \"Winner\");","map":{"version":3,"names":["useEffect","useState","NominatedMovie","useCookies","jsxDEV","_jsxDEV","Winner","_s","cookie","winner","setWinner","movies","setMovies","nominatedMovies","length","randomIndex","Math","floor","random","JSON","parse","children","fileName","_jsxFileName","lineNumber","columnNumber","id","imdbID","index","onRemove","_c","$RefreshReg$"],"sources":["/Users/FatimaElZahraa/shopify-challenge/my-app/src/Pages/Winner/Winner.tsx"],"sourcesContent":["// import React from \"react\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// import \"./Winner.css\";\n// import { WinnerProps } from \"./Winner.types\";\n\n// export const Winner = ({ movies }: WinnerProps) => {\n//   const handleSelectWinner = () => {\n//     // Randomly select a movie as the winner\n//     const randomIndex = Math.floor(Math.random() * movies.length);\n//     const winnerMovie = movies[randomIndex];\n//     console.log(\"Winner:\", winnerMovie);\n//   };\n\n//   return (\n//     <div className=\"winner-container\">\n//       <h1>Winner</h1>\n//       <button onClick={handleSelectWinner}>Select Winner</button>\n//       <div className=\"nominated-movies-container\">\n//         {movies.map((movie, index) => (\n//           <NominatedMovie\n//             key={movie.id}\n//             id={movie.id}\n//             index={index + 1}\n//             onRemove={() => {}}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n\n\n\n//////////////////////\n\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\nimport { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\nimport { useCookies } from \"react-cookie\";\nexport const Winner = () => {\n  const [cookie] = useCookies(['movies']);\n  const [winner, setWinner] = useState<INominatedMovie | null>(null);\n  const [movies, setMovies] = useState<INominatedMovie[]>()\n\n  useEffect(() => {\n    if (nominatedMovies && nominatedMovies.length > 0) {\n      const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n      setWinner(nominatedMovies[randomIndex]);\n    }\n  }, [nominatedMovies]);\n  \n  useEffect(() => {\n    setMovies(JSON.parse(cookie.movies))\n  }, [cookie]);\n\n  return winner ? (\n    <div>\n      <h1>Winner</h1>\n      <NominatedMovie\n        id={winner.imdbID}\n        index={1} // You can set the desired index here\n        onRemove={() => {}} // You can add a remove handler if needed\n      />\n    </div>\n  ) : (\n    <p>No nominated movies found.</p>\n  )}\n;\n\n//////////////////////////////////\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?s=YOUR_SEARCH_TERM&apikey=3d85689c\" // Replace YOUR_SEARCH_TERM with your specific search term\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAI3C,SAASC,cAAc,QAAQ,gDAAgD;AAC/E,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,CAAC,GAAGL,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;EACvC,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAyB,IAAI,CAAC;EAClE,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAoB,CAAC;EAEzDD,SAAS,CAAC,MAAM;IACd,IAAIa,eAAe,IAAIA,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;MACjD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,eAAe,CAACC,MAAM,CAAC;MACtEJ,SAAS,CAACG,eAAe,CAACE,WAAW,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,CAACF,eAAe,CAAC,CAAC;EAErBb,SAAS,CAAC,MAAM;IACdY,SAAS,CAACO,IAAI,CAACC,KAAK,CAACZ,MAAM,CAACG,MAAM,CAAC,CAAC;EACtC,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,OAAOC,MAAM,gBACXJ,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfpB,OAAA,CAACH,cAAc;MACbwB,EAAE,EAAEjB,MAAM,CAACkB,MAAO;MAClBC,KAAK,EAAE,CAAE,CAAC;MAAA;MACVC,QAAQ,EAAEA,CAAA,KAAM,CAAC,CAAE,CAAC;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC,gBAENpB,OAAA;IAAAgB,QAAA,EAAG;EAA0B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CACjC;AAAA,CAAC;;AAGJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAlB,EAAA,CA1EaD,MAAM;EAAA,QACAH,UAAU;AAAA;AAAA2B,EAAA,GADhBxB,MAAM;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
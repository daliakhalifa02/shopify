{"ast":null,"code":"// import React from \"react\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// import \"./Winner.css\";\n// import { WinnerProps } from \"./Winner.types\";\n\n// export const Winner = ({ movies }: WinnerProps) => {\n//   const handleSelectWinner = () => {\n//     // Randomly select a movie as the winner\n//     const randomIndex = Math.floor(Math.random() * movies.length);\n//     const winnerMovie = movies[randomIndex];\n//     console.log(\"Winner:\", winnerMovie);\n//   };\n\n//   return (\n//     <div className=\"winner-container\">\n//       <h1>Winner</h1>\n//       <button onClick={handleSelectWinner}>Select Winner</button>\n//       <div className=\"nominated-movies-container\">\n//         {movies.map((movie, index) => (\n//           <NominatedMovie\n//             key={movie.id}\n//             id={movie.id}\n//             index={index + 1}\n//             onRemove={() => {}}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n//////////////////////\n\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?i=tt3896198&apikey=3d85689c\"\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n//////////////////////////////////\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?s=YOUR_SEARCH_TERM&apikey=3d85689c\" // Replace YOUR_SEARCH_TERM with your specific search term\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/Users/FatimaElZahraa/shopify-challenge/my-app/src/Pages/Winner/Winner.tsx"],"sourcesContent":["// import React from \"react\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// import \"./Winner.css\";\n// import { WinnerProps } from \"./Winner.types\";\n\n// export const Winner = ({ movies }: WinnerProps) => {\n//   const handleSelectWinner = () => {\n//     // Randomly select a movie as the winner\n//     const randomIndex = Math.floor(Math.random() * movies.length);\n//     const winnerMovie = movies[randomIndex];\n//     console.log(\"Winner:\", winnerMovie);\n//   };\n\n//   return (\n//     <div className=\"winner-container\">\n//       <h1>Winner</h1>\n//       <button onClick={handleSelectWinner}>Select Winner</button>\n//       <div className=\"nominated-movies-container\">\n//         {movies.map((movie, index) => (\n//           <NominatedMovie\n//             key={movie.id}\n//             id={movie.id}\n//             index={index + 1}\n//             onRemove={() => {}}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n\n\n\n//////////////////////\n\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?i=tt3896198&apikey=3d85689c\"\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n//////////////////////////////////\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?s=YOUR_SEARCH_TERM&apikey=3d85689c\" // Replace YOUR_SEARCH_TERM with your specific search term\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
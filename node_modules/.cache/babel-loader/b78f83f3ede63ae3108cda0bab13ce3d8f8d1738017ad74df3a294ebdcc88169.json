{"ast":null,"code":"var _jsxFileName = \"/Users/FatimaElZahraa/shopify-challenge/my-app/src/Pages/Winner/Winner.tsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// import \"./Winner.css\";\n// import { WinnerProps } from \"./Winner.types\";\n\n// export const Winner = ({ movies }: WinnerProps) => {\n//   const handleSelectWinner = () => {\n//     // Randomly select a movie as the winner\n//     const randomIndex = Math.floor(Math.random() * movies.length);\n//     const winnerMovie = movies[randomIndex];\n//     console.log(\"Winner:\", winnerMovie);\n//   };\n\n//   return (\n//     <div className=\"winner-container\">\n//       <h1>Winner</h1>\n//       <button onClick={handleSelectWinner}>Select Winner</button>\n//       <div className=\"nominated-movies-container\">\n//         {movies.map((movie, index) => (\n//           <NominatedMovie\n//             key={movie.id}\n//             id={movie.id}\n//             index={index + 1}\n//             onRemove={() => {}}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n//////////////////////\n\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?i=tt3896198&apikey=3d85689c\"\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n//////////////////////////////////\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?s=YOUR_SEARCH_TERM&apikey=3d85689c\" // Replace YOUR_SEARCH_TERM with your specific search term\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n///////////////////////////////\nimport React, { useState } from \"react\";\nimport { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\nimport \"./Winner.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Winner = _ref => {\n  _s();\n  let {\n    movies\n  } = _ref;\n  const [winnerMovie, setWinnerMovie] = useState(null);\n  const handleSelectWinner = () => {\n    // Randomly select a movie as the winner\n    const randomIndex = Math.floor(Math.random() * movies.length);\n    const winner = movies[randomIndex];\n    setWinnerMovie(winner);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"winner-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSelectWinner,\n      children: \"Select Winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nominated-movies-container\",\n      children: movies.map((movie, index) => /*#__PURE__*/_jsxDEV(NominatedMovie, {\n        id: movie.id,\n        index: index + 1,\n        onRemove: () => {}\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), winnerMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-movie-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"And the winner is:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NominatedMovie, {\n        id: winnerMovie.id,\n        index: movies.indexOf(winnerMovie) + 1,\n        onRemove: () => {}\n      }, winnerMovie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Winner, \"r7Nl5qFZE+pZm02jEElufVY8JbQ=\");\n_c = Winner;\nvar _c;\n$RefreshReg$(_c, \"Winner\");","map":{"version":3,"names":["React","useState","NominatedMovie","jsxDEV","_jsxDEV","Winner","_ref","_s","movies","winnerMovie","setWinnerMovie","handleSelectWinner","randomIndex","Math","floor","random","length","winner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","movie","index","id","onRemove","indexOf","_c","$RefreshReg$"],"sources":["/Users/FatimaElZahraa/shopify-challenge/my-app/src/Pages/Winner/Winner.tsx"],"sourcesContent":["// import React from \"react\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// import \"./Winner.css\";\n// import { WinnerProps } from \"./Winner.types\";\n\n// export const Winner = ({ movies }: WinnerProps) => {\n//   const handleSelectWinner = () => {\n//     // Randomly select a movie as the winner\n//     const randomIndex = Math.floor(Math.random() * movies.length);\n//     const winnerMovie = movies[randomIndex];\n//     console.log(\"Winner:\", winnerMovie);\n//   };\n\n//   return (\n//     <div className=\"winner-container\">\n//       <h1>Winner</h1>\n//       <button onClick={handleSelectWinner}>Select Winner</button>\n//       <div className=\"nominated-movies-container\">\n//         {movies.map((movie, index) => (\n//           <NominatedMovie\n//             key={movie.id}\n//             id={movie.id}\n//             index={index + 1}\n//             onRemove={() => {}}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n\n\n\n//////////////////////\n\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?i=tt3896198&apikey=3d85689c\"\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n//////////////////////////////////\n// import { useEffect, useState } from \"react\";\n// import { useQuery } from \"react-query\";\n// import axios from \"axios\";\n// import { INominatedMovie, NominatedMovieProps } from \"../../components/NominatedMovie/NominatedMovie.types\";\n// import { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\n\n// export const Winner = () => {\n//   const [winner, setWinner] = useState<INominatedMovie | null>(null);\n//   const { data: nominatedMovies, isLoading } = useQuery<INominatedMovie[]>(\n//     \"nominated-movies\",\n//     async () => {\n//       const response = await axios.get(\n//         \"http://www.omdbapi.com/?s=YOUR_SEARCH_TERM&apikey=3d85689c\" // Replace YOUR_SEARCH_TERM with your specific search term\n//       );\n//       return response.data.Search;\n//     }\n//   );\n\n//   useEffect(() => {\n//     if (nominatedMovies && nominatedMovies.length > 0) {\n//       const randomIndex = Math.floor(Math.random() * nominatedMovies.length);\n//       setWinner(nominatedMovies[randomIndex]);\n//     }\n//   }, [nominatedMovies]);\n\n//   return isLoading ? (\n//     <p>Loading winner...</p>\n//   ) : (\n//     <>\n//       {winner ? (\n//         <div>\n//           <h1>Winner</h1>\n//           <NominatedMovie\n//             id={winner.imdbID}\n//             index={1} // You can set the desired index here\n//             onRemove={() => {}} // You can add a remove handler if needed\n//           />\n//         </div>\n//       ) : (\n//         <p>No nominated movies found.</p>\n//       )}\n//     </>\n//   );\n// };\n\n\n///////////////////////////////\nimport React, { useState } from \"react\";\nimport { NominatedMovie } from \"../../components/NominatedMovie/NominatedMovie\";\nimport \"./Winner.css\";\nimport { WinnerProps } from \"./Winner.types\";\n\nexport const Winner = ({ movies }: WinnerProps) => {\n  const [winnerMovie, setWinnerMovie] = useState(null);\n\n  const handleSelectWinner = () => {\n    // Randomly select a movie as the winner\n    const randomIndex = Math.floor(Math.random() * movies.length);\n    const winner = movies[randomIndex];\n    setWinnerMovie(winner);\n  };\n\n  return (\n    <div className=\"winner-container\">\n      <h1>Winner</h1>\n      <button onClick={handleSelectWinner}>Select Winner</button>\n      <div className=\"nominated-movies-container\">\n        {movies.map((movie, index) => (\n          <NominatedMovie\n            key={movie.id}\n            id={movie.id}\n            index={index + 1}\n            onRemove={() => {}}\n          />\n        ))}\n      </div>\n      {winnerMovie && (\n        <div className=\"winner-movie-container\">\n          <h2>And the winner is:</h2>\n          <NominatedMovie\n            key={winnerMovie.id}\n            id={winnerMovie.id}\n            index={movies.indexOf(winnerMovie) + 1}\n            onRemove={() => {}}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,QAAQ,gDAAgD;AAC/E,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtB,OAAO,MAAMC,MAAM,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC;EAAoB,CAAC,GAAAF,IAAA;EAC5C,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMU,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,MAAM,CAACQ,MAAM,CAAC;IAC7D,MAAMC,MAAM,GAAGT,MAAM,CAACI,WAAW,CAAC;IAClCF,cAAc,CAACO,MAAM,CAAC;EACxB,CAAC;EAED,oBACEb,OAAA;IAAKc,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/Bf,OAAA;MAAAe,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfnB,OAAA;MAAQoB,OAAO,EAAEb,kBAAmB;MAAAQ,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3DnB,OAAA;MAAKc,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EACxCX,MAAM,CAACiB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvBvB,OAAA,CAACF,cAAc;QAEb0B,EAAE,EAAEF,KAAK,CAACE,EAAG;QACbD,KAAK,EAAEA,KAAK,GAAG,CAAE;QACjBE,QAAQ,EAAEA,CAAA,KAAM,CAAC;MAAE,GAHdH,KAAK,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLd,WAAW,iBACVL,OAAA;MAAKc,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACrCf,OAAA;QAAAe,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BnB,OAAA,CAACF,cAAc;QAEb0B,EAAE,EAAEnB,WAAW,CAACmB,EAAG;QACnBD,KAAK,EAAEnB,MAAM,CAACsB,OAAO,CAACrB,WAAW,CAAC,GAAG,CAAE;QACvCoB,QAAQ,EAAEA,CAAA,KAAM,CAAC;MAAE,GAHdpB,WAAW,CAACmB,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChB,EAAA,CArCWF,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}